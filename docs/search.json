{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-05-06T15:18:40+02:00"
    },
    {
      "path": "agent-based-modeling.html",
      "title": "Agent-Based Modeling",
      "author": [],
      "contents": "\nAgent-based modeling (ABM) is a technique used to model complex emergent phenomena through the simulation of local interactions. Crudely speaking, this is what you do to set up an ABM: You create a bunch of agents with some defined behavior, put them in an arena, and enjoy the show. Of course, there is more to ABM than this, but I find it a useful way to develop a basic understanding of ABM.\nIn general, an ABM consists of three main components (Epstein and Axtell 1996):\nagents\nan environment\nrules of how agents interact with one another and their environment\nThey are suited for problems where an emergent phenomenon can be explained by local interactions. Usually, in ABMs, we define behavior on an individual level (i.e., agent level), hence ABMs are sometimes also referred to as Individual-Based Models. What we want to observe, though, is effects on a “global” level (global with regard to the model).\nThis means that ABMs are characterized by a micro and a macro level.\nIt might be easiest to start with a totally artificial example.\nThis is from the text book by Wilensky and Rand (Wilensky and Rand 2015).\nCreate a couple of agents. Arrange them in a circle. In each step, the agents move a little bit forward and then turn by a certain degree in such a way that they always stay on the outline of the circle.\nIf you play this initial setup out, the agents will just move around in a circle.\nThis is determined by the behavior that we gave the agents, namely “move a bit forward, then turn.”\n[CIRCLING ANIMATION]\nNow, we have calibrated this behavior perfectly for the agents to move in a circle. Say we increase the distance that the agents move forward by a tiny amount. What would you expect to happen?\n[EITHER ANIMATED GRAPHIC OR LINK TO NETLOGO LIBRARY]\nWould you have expected this? If you’re like me, you would have probably expected the agents to just move in a bigger circle or something along those lines.\nThis “pulsing” that we can observe is an emergent phenomenon.\nSimply looking at the constituents of the system doesn’t tell us a lot. If we simply observed a single agent, we would just see it move a bit forward and then turn. Maybe we might guess, that it moves in a circle. And maybe, if you really took the time and reasoned through the entire thing carefully, you might have guessed that this “pulsing” would happen.\nHowever, this is an extremely simple and also a very artificial example of an ABM. Additionally, in this model, we know the agents first and have no idea about the emergent phenomenon.\nUsually, ABM is employed to try to find possible explanations for a well-known macro-level phenomenon by “growing” it from local interactions Epstein (1999).\nIn most cases, it is virtually impossible to explain an emergent phenomenon in a system by simply thinking about it.\n[CONTINUE]\n\n\n\nEpstein, J. M. 1999. “Agent-based Computational Models and Generative Social Science.” Complexity 4 (5): 41–60. https://doi.org/10.1002/(SICI)1099-0526(199905/06)4:5<41::AID-CPLX9>3.0.CO;2-F.\n\n\nEpstein, J. M., and R. Axtell. 1996. Growing Artificial Societies: Social Science from the Bottom Up. Brookings Institution Press.\n\n\nWilensky, U., and W. Rand. 2015. Introduction to Agent-Based Modeling: Modeling Natural, Social and Engineered Complex Systems with NetLogo. Cambridge, MA: MIT Press.\n\n\n\n\n",
      "last_modified": "2022-05-06T15:18:40+02:00"
    },
    {
      "path": "cellular-automata.html",
      "title": "Cellular Automata",
      "author": [],
      "contents": "\nOne of the main purposes of agent-based modeling is to find potential explanations for emergent properties of complex systems. That’s a mouth full. Let’s break it down and start with emergence.\nIt’s a concept that is a bit hard to explain, but cellular automata serve as a great example because they make it intuitively understandable.\n\n\n\n",
      "last_modified": "2022-05-06T15:18:41+02:00"
    },
    {
      "path": "conways-life.html",
      "title": "Conway's Life",
      "author": [],
      "contents": "\nConway’s Life is a cellular automaton that has captured the\nimagination of thousands. It was discovered by the mathematician John\nConway and made known to a wider audience for the first time in a public\nnewsletter on mathematical games by Martin Gardner (Gardner\n1970). Life is an amazing demonstration of how great\ncomplexity can arise from very simple rules.\nThe automaton runs an a square lattice and each cell has one of two\ndistinct states: alive or dead. We can visualize this by assigning the\ncolor white to dead cells and the color black to alive cells to get\nsomething like this:\n\n\n\nIn cellular automata, a cell’s next state is a function of the states\nof its neighboring cells’ states. For Life, we define an update\nfunction that takes the states of the Moore neighborhood as input.\nThe rules (Gardner\n1970) look deceptively simple:\nSurvivals: Each alive cell with 2 or 3 neighbors\nsurvives into the next generation.\nDeaths: Each alive cell that has less than 2\nneighbors dies from isolation. Each alive cell with 4 or more neighbors\ndies from overpopulation.\nBirths: Each dead cell with exactly 3 neighbors\nbecomes alive.\nTo update the automaton, we simply apply these rules to each cell\nsimultaneously.\nTask\nLook at the following two states of the Life automaton. The one on\nthe right is the successor of the one on the left (the state\nafter applying the life rule once). Verify for a couple of cells that\nthe rules above were applied. What would you expect to happen when we\nrun this setup for many time steps?\nNote that the grid “wraps around”, meaning that we’re dealing with a\ntorus.\n\n\n\nComplex Patterns in Conway’s\nLife\nLet’s have a look at how the initial state shown above would play\nout.\n\n\n\nYou can see that there are some structures that move around, some\nthat are stationary, some that exhibit a sort of “pulsing”, and much\nmore. Mathematicians, researchers, and hobbyists have been on the hunt\nfor these patterns for decades and there is a rich library of patterns\nthat have been in the process1.\nThere are many fascinating things to discover in Conway’s Life. For\ninstance, this setup …\n\n\n\n… generates this pattern:\n\n\n\nSome Pattern Classes in\nConway’s Life\nMany patterns in Life exhibit similar properties which is why they\nhave been summarized in classes. The ones described below do not nearly\nconstitute an exhaustive description of those classes.\nSpaceships\nYes, you read correctly. Spaceships are a class of periodic patterns\nthat “move” across the grid. One of the simplest ones (and perhaps the\nmost infamous structure in Life altogether) is the so-called\nGlider.\nIt looks like this:\n\n\n\nThe Glider replicates every four steps displaced diagonally by 1. In\nthe following graphic, you can see that the Glider replicates the same\npattern every two steps, but mirrored on the diagonal.\n\n\n\nJust to give you a taste of what a more complex spaceship in Life\nlooks like, this is a so-called Canada Goose (LifeWiki\n2021a):\n\n\n\nWith a little bit of imagination, you can see why it’s called a\nCanada Goose…\nOscillators\nWe have seen that spaceships are patterns that replicate displaced by\nsome amount on the grid, giving them the impression of “moving” across\nthe grid. Oscillators do the same thing, but in-place, or in other\nwords, they are their own predecessors (LifeWiki\n2022b).\nThe simplest oscillator is called a Blinker (LifeWiki\n2022a):\n\n\n\nThis one is called a Pulsar (LifeWiki 2022c):\n\n\n\nAnd finally, this one is called a Pinwheel (LifeWiki\n2021b):\n\n\n\nConclusion\nThere are countless more patterns and pattern classes like these. If\nyou want to take a deeper look into this automaton, check out the LifeWiki which has great\nresources on the topic. For the purposes of this course, this article is\nintended to give you an intuitive notion of the term “emergence”. As you\nsaw throughout this article, the simple rules of the Life automaton\nimply amounts of complexity that can fill books and perhaps an entire\nencyclopedia.\nFor a very rich collection of resources on Conway’s Life, check out\nthis website.\nProject Ideas\nImplementing Life is not that difficult and a great way for beginners\nto learn programming. Try implementing Life in a programming\nlanguage of your choosing.\nYou can also check out the gridabm\nR library which contains an implementation of Life2\n\n\n\nGardner, M. 1970. “Mathematical Games: The\nFantastic Combinations of John Conway’s New Solitaire Game\n\"life\".” Scientific American 223 (4): 120–23.\n\n\nLifeWiki. 2021a. “Canada Goose.” https://conwaylife.com/wiki/Canada_goose.\n\n\n———. 2021b. “Pinwheel.” https://conwaylife.com/wiki/Pinwheel.\n\n\n———. 2022a. “Blinker.” https://conwaylife.com/wiki/Blinker.\n\n\n———. 2022b. “Oscillator.” https://conwaylife.com/wiki/Oscillator.\n\n\n———. 2022c. “Pulsar.” https://conwaylife.com/wiki/Pulsar.\n\n\nFor instance, check out the LifeWiki where many of\nthose patterns are documented.↩︎\nThe graphics and animations in this\narticle were generated with the gridabm library.↩︎\n",
      "last_modified": "2022-06-15T15:24:53+02:00"
    },
    {
      "path": "forest-fire.html",
      "title": "Forest Fire",
      "author": [],
      "contents": "\nAgent-based modeling can be applied in a wide range of domains.\nAlthough we are focussing on social phenomena in this course, we will\nhave a look at a slightly different example here: We will set a forest\non fire. In a model, of course.\nThe model we are looking at was devised by Drossel and Schwabl (1992). Like in Conway’s Life and the Schelling model of segregation, it operates\non a 2D grid graph. Each cell has one of four distinct states:\nwhite = The cell is empty\ngreen = There is a tree on the cell\norange = There is a burning tree on the\ncell\ndark red = There is a burnt tree on the\ncell\nTo set up the model, we distribute trees (= green cells) at a certain\npredefined density on the grid and set a certain number of initial trees\non fire. The effects of the model are most illustrative, when we set the\nfirst column on fire. This means that all trees on the left of the board\nare on fire.\n\n\n\nThe update rule is defined as follows:\n\nEach burning tree sets all non-burning trees in its Von Neumann\nneighborhood on fire. All burning trees “burn out” (i.e., they\nenter the state “burnt”).\n\nIn the original model, there are several parameters one can\nmanipulate, but in this article, we focus on one: the density of trees\non the board. Let’s have a look at an example with \\(density = 0.7\\):\n\n\n\nAs you can see, the model exhibits face validity with regards to our\nmodel domain. Like we would expect in a real forest fire, we can see\nthat the fire burns through the forest, each burning trees setting the\ntrees in their surrounding on fire.\nNow let’s look what happens if we manipulate the tree density.\n\n\n\n\n\n\n\n\n\nThe higher the density of trees, the more quickly and the more\ncompletely the fire burns through the forest. Of course, this is only a\nquick visual impression. We can quantify these intuitions easily by\nrunning the model several times at different levels of tree density\nrespectively.\n[TODO: Do numeric analysis]\n\n\n\nDrossel, B., and F. Schwabl. 1992. “Self-Organized Critical\nForest-Fire Model.” Phys. Rev. Lett. 69 (September):\n1629–32. https://doi.org/10.1103/PhysRevLett.69.1629.\n\n\n\n\n",
      "last_modified": "2022-06-17T19:26:21+02:00"
    },
    {
      "path": "index.html",
      "title": "Agent-Based Modeling",
      "description": "An Introduction to Agent-Based Modeling and the Property of Emergence in Complex Systems.\n",
      "author": [],
      "contents": "\nCellular automata\nLife\nThe Schelling model of\nsegregation\nForest fire\nAgent-based modeling\nNeighborhoods\n\n\n\n",
      "last_modified": "2022-06-15T17:41:12+02:00"
    },
    {
      "path": "neighborhood-relations.html",
      "title": "Neighborhood Relations",
      "author": [],
      "contents": "\nCellular automata usually operate on lattices and they perform local computations, meaning that the state of a cell depends on the cell’s immediate vicinity and not some global state. This means that we need some definitions of what constitutes a neighborhood in cellular automata. But the concept of neighborhoods extends to agent-based models as well.\nMoore Neighborhood\nPerhaps the most common neighborhood relation is the Moore neighborhood. It is used, for instance, in Conway’s life.\nThe Moore neighborhood is defined on a two-dimensional lattice, or simply but, a grid. This is what it looks like:\n[GRAPHIC MOORE NEIGHBORHOOD]\nThe Moore neighborhood is simply given by the four cells on each side of a cell as well as the four cells on each corner of a cell (think north, north-east, east, south-east, etc.).\nYou might say “Well of course all 8 adjacent cells are the neighborhood of a cell! What else could it be?” Well, there is one obvious other way.\nVon Neumann Neighborhood\nThe Von Neumann neighborhood is also defined on a lattice (although it is more generic and applies not only to two-dimensional grids, more on that further down). On a two-dimensional lattice, it’s simply the four cells that are adjacent to each side of a cell.\n[GRAPHIC VON NEUMANN NEIGHBORHOOD]\nThe more formal definition, however, is that the Von Neumann neighborhood is comprised of the cell in question and all cells within a Manhattan distance of 1.\nNeighborhoods in Graphs\nIn a graph, the definition for neighborhood is pretty straight-forward. In the simplest case, it is just all nodes that are connected to a node by an edge. Of course, you can also define neighborhoods with larger distances, for example all nodes that are within a path distance of 2 of a node.\n[GRAPHIC OF GRAPH NEIGHBORHOOD]\n\n\n\n",
      "last_modified": "2022-05-06T15:28:17+02:00"
    },
    {
      "path": "schelling.html",
      "title": "The Schelling Model of Segregation",
      "author": [],
      "contents": "\nOne of the earliest agent-based models was devised in 1971 by Thomas\nSchelling (Schelling\n1971). It pioneered many of the paradigms that constitute\nagent-based modeling today. As you will see, this model is very\nreminiscent of the 2D cellular automata that we looked at before, but\nthe “cells” are explicitly anthropomorphized, bridging the gap to\nthinking about them as agents. In Conway’s Life, you saw that the update\nrules were loosely metaphorical for social phenomena (“survivals”,\n“births”, “deaths”, “isolation”, “overpopulation”, etc.). We may never\nknow how much inspiration Schelling took from the contemporary movement\nof hobbyists analyzing Conway’s Life, but the time was ripe for the\nparadigm of agent-based modeling.\nSchelling’s model addressed the phenomenon of ethnic segregation in\nurban areas. In the 1970s, when this paper was published, residential\nsegregation between people of different ethnicities was very pronounced\nin the US and efforts to alleviate this problem were slow. Schelling’s\nmodel of segregation assumes agents with very simple behavior to\nleverage some insights into why segregation proved so difficult to\nreverse.\nThe Constituents of the\nModel\nThe Schelling model is constituted by three general components1: agents, an environment, and rules\naccording to which agents interact with each other and with the\nenvironment. We will go through the model components one by one to\ndevelop an intuitive understanding of agent-based models and how they\nare built.\nThe Environment\nLet’s start with the environment of the Schelling model. The\nenvironment is the “arena” in which the agents interact with\none another. In the Schelling model, we use a square grid, just like the\none that we used in Conway’s Life:\n\n\n\nThere are many more options when choosing how to represent an\nenvironment in your model, though. For instance, you can put your agents\non a graph and let them move around over its edges, you can create a\ncontinuous plane where agents move around in two dimensions, or you\ncould even create virtual 3D worlds with a physics engine. The choice of\nenvironment depends heavily on the objective of the model. In the case\nof the Schelling model, the grid represents urban areas in the US\n“closely enough”. A good general rule of thumb is to make the model as\nsimple as possible to retain its explanatory power2.\nAgents\nThe most important unit of an agent-based model are, of course, the\nagents. The agents are the individuals that interact in the\narena that we set up with our environment. In the simplest configuration\nof the Schelling model, we have two different kinds of agents that we\ndistribute randomly across the grid, leaving a certain percentage of\ncells empty so that the agents can move around. Let’s call the two agent\ntypes blue and orange agents.\n\n\n\nUpdate Rule or Stepping\nFunction\nThe update rules define how agents interact with one another and with\nthe environment. As we measure “time” in agent-based models as discrete\ntime steps, update rules are sometimes referred to as stepping\nfunctions or step functions. In the Schelling model, the\nupdate rules are very simple:\nFirst, we set a global tolerance level which\nindicates, how many agents of the other kind an agent is willing to\ntolerate in its neighborhood.\nThen, we check for each agent whether the number of agents of the\nother kind in its neighborhood3 exceeds the tolerance\nlevel that we set globally for the model.\nAll agents for which the tolerance level is exceeded relocate to a\nrandom free position on the grid.\nNote that we define an agent’s neighborhood as its Moore\nneighborhood.\n\n\n\nRunning the Model\nLet’s look at a simple example of how this model plays out over time.\nWe randomly distribute blue and orange agents in equal proportion over\nthe grid, leaving 10 % of the cells free. The tolerance level is set to\n4, meaning that each agent will relocate if it has more than 3 neighbors\nthat are not of its own kind.\nHaving a tolerance for up to 4 out of 8 neighbors of the other kind\ndoesn’t sound that intolerant. One might assume that all the agents are\nwilling to live in completely mixed neighborhoods, constituted of\napproximately 50 % agents of each kind. This is not what happens,\nthough:\n\n\n\nAs you can see, the agents quickly for homogeneous clusters of blue\nand orange agents and the agents on the fringes of those clusters keep\nmoving around frantically. We can even observe this effect (although\nslightly weaker) when agents are willing to live in a neighborhood with\na majority of agents of the other kind. This is how the model turns out\nfor \\(tolerance = 5\\)\n\n\n\nEven with seemingly high tolerance levels, agents cluster into areas\nof alike agents which mimics the phenomenon of ethnic segregation that\nSchelling and his contemporaries were trying to solve. This is the main\nfinding from this model, but by far not the only one. There are several\nparameters that we can manipulate to systematically analyze how this\nsystem behaves. However, before we move on to analyze this model\nsystematically, it is first important to get a feel of what it means to\nmanipulate a system parameter in an agent-based model.\nTask\nThere is a free\nimplementation of Schelling’s model (Wilensky\n1997) in the NetLogo (Wilensky\n1999) library. Open it and play around with the parameters.\nCan you observe some general tendencies when you manipulate the\ntolerance parameter?\nAlternatively to NetLogo, you can use the gridabm\nframework for R which was\nalso used to generate the animations and plots for this article.\nManipulating the Tolerance\nParameter\n[TODO: write/edit]\nIn the example above, we already saw that with a tolerance level of\n\\(3\\), the segregation into clusters of\nalike agents. What would you expect to happen for higher or lower\ntolerance thresholds?\n\n\n\n\n\n\nEpstein, J. M., and R. Axtell. 1996. Growing\nArtificial Societies: Social Science from the Bottom Up.\nBrookings Institution Press.\n\n\nSchelling, Thomas C. 1971. “Dynamic Models of Segregation.”\nThe Journal of Mathematical Sociology 1 (2): 143–86. https://doi.org/10.1080/0022250X.1971.9989794.\n\n\nWilensky, U. 1997. “NetLogo Segregation Model.” Evanston,\nIL: Center for Connected Learning; Computer-Based Modeling, Northwestern\nUniversity. http://ccl.northwestern.edu/netlogo/models/Segregation.\n\n\n———. 1999. “NetLogo.” Evanston, IL: Center for Connected\nLearning; Computer-Based Modeling, Northwestern University. http://ccl.northwestern.edu/netlogo/.\n\n\nAs are all agent-based models, more\nor less (Epstein and Axtell\n1996).↩︎\nThat applies not only to the model\nenvironment, but to all components of the model.↩︎\nI.e., blue if an agent is orange and\nvice versa.↩︎\n",
      "last_modified": "2022-06-15T17:34:41+02:00"
    }
  ],
  "collections": []
}
