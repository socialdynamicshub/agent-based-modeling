{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-05-06T15:18:40+02:00"
    },
    {
      "path": "agent-based-modeling.html",
      "title": "Agent-Based Modeling",
      "author": [],
      "contents": "\nAgent-based modeling (ABM) is a technique used to model complex emergent phenomena through the simulation of local interactions. Crudely speaking, this is what you do to set up an ABM: You create a bunch of agents with some defined behavior, put them in an arena, and enjoy the show. Of course, there is more to ABM than this, but I find it a useful way to develop a basic understanding of ABM.\nIn general, an ABM consists of three main components (Epstein and Axtell 1996):\nagents\nan environment\nrules of how agents interact with one another and their environment\nThey are suited for problems where an emergent phenomenon can be explained by local interactions. Usually, in ABMs, we define behavior on an individual level (i.e., agent level), hence ABMs are sometimes also referred to as Individual-Based Models. What we want to observe, though, is effects on a “global” level (global with regard to the model).\nThis means that ABMs are characterized by a micro and a macro level.\nIt might be easiest to start with a totally artificial example.\nThis is from the text book by Wilensky and Rand (Wilensky and Rand 2015).\nCreate a couple of agents. Arrange them in a circle. In each step, the agents move a little bit forward and then turn by a certain degree in such a way that they always stay on the outline of the circle.\nIf you play this initial setup out, the agents will just move around in a circle.\nThis is determined by the behavior that we gave the agents, namely “move a bit forward, then turn.”\n[CIRCLING ANIMATION]\nNow, we have calibrated this behavior perfectly for the agents to move in a circle. Say we increase the distance that the agents move forward by a tiny amount. What would you expect to happen?\n[EITHER ANIMATED GRAPHIC OR LINK TO NETLOGO LIBRARY]\nWould you have expected this? If you’re like me, you would have probably expected the agents to just move in a bigger circle or something along those lines.\nThis “pulsing” that we can observe is an emergent phenomenon.\nSimply looking at the constituents of the system doesn’t tell us a lot. If we simply observed a single agent, we would just see it move a bit forward and then turn. Maybe we might guess, that it moves in a circle. And maybe, if you really took the time and reasoned through the entire thing carefully, you might have guessed that this “pulsing” would happen.\nHowever, this is an extremely simple and also a very artificial example of an ABM. Additionally, in this model, we know the agents first and have no idea about the emergent phenomenon.\nUsually, ABM is employed to try to find possible explanations for a well-known macro-level phenomenon by “growing” it from local interactions Epstein (1999).\nIn most cases, it is virtually impossible to explain an emergent phenomenon in a system by simply thinking about it.\n[CONTINUE]\n\n\n\nEpstein, J. M. 1999. “Agent-based Computational Models and Generative Social Science.” Complexity 4 (5): 41–60. https://doi.org/10.1002/(SICI)1099-0526(199905/06)4:5<41::AID-CPLX9>3.0.CO;2-F.\n\n\nEpstein, J. M., and R. Axtell. 1996. Growing Artificial Societies: Social Science from the Bottom Up. Brookings Institution Press.\n\n\nWilensky, U., and W. Rand. 2015. Introduction to Agent-Based Modeling: Modeling Natural, Social and Engineered Complex Systems with NetLogo. Cambridge, MA: MIT Press.\n\n\n\n\n",
      "last_modified": "2022-05-06T15:18:40+02:00"
    },
    {
      "path": "cellular-automata.html",
      "title": "Cellular Automata",
      "author": [],
      "contents": "\nOne of the main purposes of agent-based modeling is to find potential explanations for emergent properties of complex systems. That’s a mouth full. Let’s break it down and start with emergence.\nIt’s a concept that is a bit hard to explain, but cellular automata serve as a great example because they make it intuitively understandable.\n\n\n\n",
      "last_modified": "2022-05-06T15:18:41+02:00"
    },
    {
      "path": "forest-fire.html",
      "title": "Forest Fire",
      "author": [],
      "contents": "\nThe domains that agent-based modeling can be applied to are various. We will demonstrate this by setting a forest on fire. In a model, of course. Here is how.\nTake a square grid. Each cell has one of four distinct states:\nwhite = The cell is empty\ngreen = There is a tree on the cell\nred = There is a burning tree on the cell\ndark red = There is a burnt tree on the cell\nTo set up the model, we distribute trees (= green cells) over the grid and set a certain number of initial trees on fire. The effects of the model are most demonstrative, when we set the first column on fire. This means that all trees on the left of the board are on fire.\n\n\n\nIn one model step, each burning tree sets all non-burning trees in its Von Neumann neighborhood on fire. All burning trees burn out (i.e., the become “burnt” or like described above dark red).\nOne parameter that we can manipulate is the density of trees on the board. Let’s have a look at an example with a tree density of 0.7:\n\n\n\nNow let’s look what happens if we manipulate the tree density.\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "last_modified": "2022-05-06T15:27:55+02:00"
    },
    {
      "path": "index.html",
      "title": "Agent-Based Modeling",
      "description": "An Introduction to Agent-Based Modeling and the Property of Emergence in Complex Systems.\n",
      "author": [],
      "contents": "\nAgent-based modeling\nThe Schelling model of segregation\nLife\nCellular automata\nForest fire\nNeighborhoods\n\n\n\n",
      "last_modified": "2022-05-06T15:27:56+02:00"
    },
    {
      "path": "life-cellular-automaton.html",
      "title": "Conway's Life",
      "author": [],
      "contents": "\nThis game has first been described in a public newsletter by Martin\nGardner (Gardner\n1970).\nTake a square grid of sufficient size and assign each cell one of two\nstates: alive or dead. Let’ start with something small, say 20x20:\n\n\n\nWhite cells are dead and black cells are alive.\nWe will now update the automaton one step at a time according to the\nfollowing rules (Gardner\n1970):\nSurvivals: Each alive cell with 2 or 3 neighbors survives into the\nnext generation.\nDeaths: Each alive cell that has less than 2 neighbors dies from\nisolation. Each alive cell with 4 or more neighbors dies from\noverpopulation.\nBirths: Each dead cell with exactly 3 neighbors becomes alive.\nIf we talk about neighbors, we are referring to the Moore\nneighborhood [TODO: add link to article]. Note that we apply these\nrules to all cells simultaneously.\nSo far so good. Seems innoccuous, right?\nTask\nWhat would you expect to happen when we run this setup for many time\nsteps?\nIn fact, this cellular automaton, called Life, displays some\nvery complex dynamics, and, frankly, some really fancy ones.\nLet’s have a look at how the initial state shown above would play\nout.\n\n\n\nYou can see that there are some pulsing things, some moving things,\nand many more interesting emergent patterns.\nTo this day, people are hunting for these patterns. There is already\na rich library of regularities and classifications on Life,\nsome of which we will have a look at.\nGlider\nThe glider is perhaps the most infamous structure in\nlife.\nIt looks like this:\n\n\n\n\n\n\nTODO:\ngliders and spaceships, oscillators, still lifes\na bit of history\nintuitive notion of emergence\nProject\nImplement Life in Julia.\n\n\n\nGardner, M. 1970. “Mathematical Games: The\nFantastic Combinations of John Conway’s New Solitaire Game\n\"life\".” Scientific American 223 (4): 120–23.\n\n\n\n\n",
      "last_modified": "2022-06-13T20:46:12+02:00"
    },
    {
      "path": "neighborhood-relations.html",
      "title": "Neighborhood Relations",
      "author": [],
      "contents": "\nCellular automata usually operate on lattices and they perform local computations, meaning that the state of a cell depends on the cell’s immediate vicinity and not some global state. This means that we need some definitions of what constitutes a neighborhood in cellular automata. But the concept of neighborhoods extends to agent-based models as well.\nMoore Neighborhood\nPerhaps the most common neighborhood relation is the Moore neighborhood. It is used, for instance, in Conway’s life.\nThe Moore neighborhood is defined on a two-dimensional lattice, or simply but, a grid. This is what it looks like:\n[GRAPHIC MOORE NEIGHBORHOOD]\nThe Moore neighborhood is simply given by the four cells on each side of a cell as well as the four cells on each corner of a cell (think north, north-east, east, south-east, etc.).\nYou might say “Well of course all 8 adjacent cells are the neighborhood of a cell! What else could it be?” Well, there is one obvious other way.\nVon Neumann Neighborhood\nThe Von Neumann neighborhood is also defined on a lattice (although it is more generic and applies not only to two-dimensional grids, more on that further down). On a two-dimensional lattice, it’s simply the four cells that are adjacent to each side of a cell.\n[GRAPHIC VON NEUMANN NEIGHBORHOOD]\nThe more formal definition, however, is that the Von Neumann neighborhood is comprised of the cell in question and all cells within a Manhattan distance of 1.\nNeighborhoods in Graphs\nIn a graph, the definition for neighborhood is pretty straight-forward. In the simplest case, it is just all nodes that are connected to a node by an edge. Of course, you can also define neighborhoods with larger distances, for example all nodes that are within a path distance of 2 of a node.\n[GRAPHIC OF GRAPH NEIGHBORHOOD]\n\n\n\n",
      "last_modified": "2022-05-06T15:28:17+02:00"
    },
    {
      "path": "schelling.html",
      "title": "The Schelling Model of Segregation",
      "author": [],
      "contents": "\nThe Schelling model of segregation (Schelling\n1971) is a famous agent-based model (ABM) that addresses\nethnic segregation in urban areas.\nThe model yielded some pretty surprising results and they will make\nclear what the intent of an agent-based model is.\nThe constituents of the model are:\nAn Environment\nThe environment is the “arena” in which the agents interact with one\nanother. In the Schelling model, we use a square grid:\n\n\n\nAgents\nThe agents are the individuals that interact in the arena. In this\ncase, we have two different kinds of agents that we distribute across\nthe grid. Let’s call them blue and orange agents. Note that we don’t\nfill the grid completely, there are empty cells left.\n\n\n\nAdditionally to having a position in the environment, agents can have\nstates or attributes. Here each agents is either happy or\nunhappy.\nRules\nThe rules define how agents interact with one another as well as with\nthe environment. In the Schelling model, the rules are as follows:\nThere is a global tolerance level which indicates,\nhow many agents of the same kind any agent wishes to live next to.\nIf the number of neighbors of the other kind (i.e., blue if an agent\nis orange and vice versa) is higher than the tolerance level allows, an\nagent is unhappy, otherwise it is happy.\nThe model is played in iterations (sometimes called steps, ticks,\ntime steps, …). In each iteration, each agent’s mood is determined\n(happy or unhappy). Agents that are unhappy move to a random free\ncell.\nEnvironment, agents, and rules are the three essential ingredients\nfor any ABM.\nThe neighborhood is defined as the eight cells around the cell that\nan agents sits on (the Moore\nneighborhood). [TODO: add link once article done]\n\n\n\nRunning the Model\nNow that we have the setup down, let’s look at a simple example. We\nrandomly draw distribute 45% blue agents, 45% orange agents, and 10%\nfree cells over the board. The tolerance level is set to 3, meaning that\neach agent will turn unhappy if it has more than 3 neighbors that are\nnot of its own kind.\n\n\n\nTask\nThere is a free implementation of Schelling’s model of segregation\n(Wilensky\n1997) in the NetLogo (Wilensky 1999) library. Open it and play\naround with the parameters. Can you observe some general tendencies of\nwhat happens?\nManipulating the\ntolerance parameter\nIn the example above, we already saw that with a tolerance level of\n\\(3\\), the segregate into clusters of\nalike agents. What would you expect to happen for higher or lower\ntolerance thresholds?\n\n\n\n\n\n\nSchelling, Thomas C. 1971. “Dynamic Models of Segregation.”\nThe Journal of Mathematical Sociology 1 (2): 143–86. https://doi.org/10.1080/0022250X.1971.9989794.\n\n\nWilensky, U. 1997. “NetLogo Segregation Model.” Evanston,\nIL: Center for Connected Learning; Computer-Based Modeling, Northwestern\nUniversity. http://ccl.northwestern.edu/netlogo/models/Segregation.\n\n\n———. 1999. “NetLogo.” Evanston, IL: Center for Connected\nLearning; Computer-Based Modeling, Northwestern University. http://ccl.northwestern.edu/netlogo/.\n\n\n\n\n",
      "last_modified": "2022-06-13T19:24:38+02:00"
    }
  ],
  "collections": []
}
